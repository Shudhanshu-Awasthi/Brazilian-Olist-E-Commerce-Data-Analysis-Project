SHOW DATABASES;
USE ECOMMERCE;

------------------------------------------------------
-- Q1 : What is the total revenue & orders generated by Olist, and how has it changed month by month to identify growth or decline trends?
-- Explanation: Calculates total revenue earned by Olist and number of orders month by month to track business growth or decline.

CREATE OR REPLACE VIEW OLIST_REVENUE_PERFORMANCE AS
WITH Order_Revenue AS (
    SELECT 
        order_id,
        SUM(payment_value) AS total_payment
    FROM order_payments
    GROUP BY order_id
)
SELECT 
    YEAR(orders.order_purchase_timestamp) AS Year,
    DATE_FORMAT(orders.order_purchase_timestamp, '%m-%Y') AS sales_month,
    ROUND(SUM(Order_Revenue.total_payment), 2) AS revenue,
    COUNT(DISTINCT orders.order_id) AS orders
FROM orders
JOIN Order_Revenue 
    ON orders.order_id = Order_Revenue.order_id
WHERE orders.order_status = 'delivered'
GROUP BY Year, sales_month
ORDER BY Year, sales_month;

-- Total revenue
SELECT ROUND(SUM(revenue),2) FROM olist_revenue_performance;

-- Monthly revenue & orders
SELECT * FROM olist_revenue_performance;

-- Total orders
SELECT SUM(orders) FROM olist_revenue_performance;

------------------------------------------------------
-- Q2  Which customer states contribute the most revenue, indicating regions for marketing focus?

SELECT 
    customers.customer_state AS state,
    ROUND(SUM(order_payments.payment_value), 2) AS total_revenue
FROM orders
JOIN customers 
    ON orders.customer_id = customers.customer_id
JOIN order_payments 
    ON orders.order_id = order_payments.order_id
WHERE orders.order_status = 'delivered'  -- consider only completed orders
GROUP BY customers.customer_state
ORDER BY total_revenue DESC;
-------------------------------------------------------
-- Q3 Which payment methods are most commonly used for delivered orders, 
-- and what proportion of total payments does each method represent? 
-- Additionally, what insights can be drawn about customer payment preferences on Olist?

-- Shows how often each payment type was used and its share of total payments
------------------------------------------------------------

WITH Delivered_Orders AS (
    -- 1) Select only delivered orders
    SELECT DISTINCT
        orders.order_id
    FROM orders
    WHERE orders.order_status = 'delivered'
),

Delivered_Payments AS (
    -- 2) Join to payments to get all payment entries for delivered orders
    SELECT
        order_payments.order_id,
        order_payments.payment_type
    FROM order_payments
    LEFT JOIN Delivered_Orders
      ON order_payments.order_id = Delivered_Orders.order_id
    WHERE order_payments.payment_type IS NOT NULL
)

-- 3) Count total times each payment type was used and its percentage of all payments
SELECT
    Delivered_Payments.payment_type AS payment_type,
    COUNT(*) AS times_used,
    ROUND(
        COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Delivered_Payments),
        2
    ) AS percentage_of_total_payments
FROM Delivered_Payments
GROUP BY Delivered_Payments.payment_type
ORDER BY times_used DESC;

----------------------------------------------------------
-- Q4. Which product categories generate the highest revenue, showing where the business earns most?
-- Q5. Which product categories sell the most units, indicating popularity vs revenue efficiency?
-- Q6. Which product categories have the highest average revenue per order , suggesting opportunities for upselling?

-- Explanation: total orders, revenue, and avg revenue per order for each product category.

WITH Delivered_Orders AS (
    SELECT order_id
    FROM orders
    WHERE order_status = 'delivered'
),
Order_Revenue AS (
    SELECT order_id, SUM(payment_value) AS total_payment
    FROM order_payments
    GROUP BY order_id
),
Item_Counts AS (
    SELECT order_id, COUNT(*) AS total_items
    FROM order_items
    GROUP BY order_id
),
Order_Items_With_Category AS (
    SELECT 
        order_items.order_id,
        order_items.product_id,
        COALESCE(product_category_name_translation.product_category_name_english,'Unknown') AS product_category,
        1 AS item_count
    FROM order_items
    LEFT JOIN products ON order_items.product_id = products.product_id
    LEFT JOIN product_category_name_translation
        ON products.product_category_name = product_category_name_translation.product_category_name
)
SELECT
    product_category,
    COUNT(DISTINCT Order_Items_With_Category.order_id) AS total_orders,
    ROUND(SUM(Order_Revenue.total_payment * Order_Items_With_Category.item_count / Item_Counts.total_items),2) AS total_revenue,
    ROUND(SUM(Order_Revenue.total_payment * Order_Items_With_Category.item_count / Item_Counts.total_items) / COUNT(DISTINCT Order_Items_With_Category.order_id),2) AS avg_revenue_per_order
FROM Order_Items_With_Category
JOIN Delivered_Orders ON Order_Items_With_Category.order_id = Delivered_Orders.order_id
LEFT JOIN Order_Revenue ON Order_Items_With_Category.order_id = Order_Revenue.order_id
LEFT JOIN Item_Counts ON Order_Items_With_Category.order_id = Item_Counts.order_id
GROUP BY product_category
ORDER BY total_revenue DESC;

------------------------------------------------------
-- Q7 What are Top 3 product categories by number of order cancellations or refunds, indicating potential quality or logistics issues?
-- Q8 What are Top 5 product categories by revenue lost due to order cancellations ?

CREATE OR REPLACE VIEW CANCELLED_ORDERS AS
SELECT
    COALESCE(Product_Category_Name_Translation.product_category_name_english, 'Unknown') AS product_category_name,
    COUNT(DISTINCT Orders.order_id) AS cancelled_orders,
    ROUND(COALESCE(SUM(Order_Items.price), 0), 2) AS revenue_lost
FROM
    Orders
    LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id
    LEFT JOIN Products ON Order_Items.product_id = Products.product_id
    LEFT JOIN Product_Category_Name_Translation
        ON Products.product_category_name = Product_Category_Name_Translation.product_category_name
WHERE
    Orders.order_status = 'canceled'
GROUP BY
    COALESCE(Product_Category_Name_Translation.product_category_name_english, 'Unknown')
ORDER BY
    revenue_lost DESC;

SELECT * FROM CANCELLED_ORDERS;
SELECT SUM(revenue_lost) FROM CANCELLED_ORDERS;
SELECT SUM(cancelled_orders) FROM CANCELLED_ORDERS;

----------------------------------------------------------------------
-- Q9: Distribution of Customers Across States

CREATE OR REPLACE VIEW Customers_Location_Info AS
SELECT
    customer_state AS State,
    COUNT(DISTINCT customers.customer_unique_id) AS No_Of_Customers,
    ROUND(
        COUNT(DISTINCT customers.customer_unique_id) * 100.0 
        / SUM(COUNT(DISTINCT customers.customer_unique_id)) OVER (),
        2
    ) AS Percentage_Of_Total_Customers
FROM customers
GROUP BY customer_state;

SELECT * FROM Customers_Location_Info ORDER BY Percentage_Of_Total_Customers DESC;

------------------------------------------------------
-- Q9: Distribution of sellers across states

CREATE OR REPLACE VIEW SELLERS_LOCATION_INFO AS
SELECT
    seller_state AS State,
    COUNT(DISTINCT seller_id) AS No_Of_Sellers,
    ROUND(
        COUNT(DISTINCT seller_id) * 100.0 
        / SUM(COUNT(DISTINCT seller_id)) OVER (),
        2
    ) AS Percentage_Of_Total_Sellers
FROM sellers
GROUP BY seller_state;

SELECT * FROM SELLERS_LOCATION_INFO ORDER BY Percentage_Of_Total_Sellers DESC;

-- Q9.How Sellers & Customers are distributed across different states and which states have low or no Seller/Customers, 
-- explaining how it can effect the business 
-- Combined customer & seller info by state

-- Explanation: Finds states with customers but no sellers, and vice versa.

SELECT 
    COALESCE(CUSTOMERS_LOCATION_INFO.State, SELLERS_LOCATION_INFO.State) AS State,
    IFNULL(CUSTOMERS_LOCATION_INFO.No_Of_Customers,0) AS No_Of_Customers,
    IFNULL(SELLERS_LOCATION_INFO.No_Of_Sellers,0) AS No_Of_Sellers
FROM CUSTOMERS_LOCATION_INFO
LEFT JOIN SELLERS_LOCATION_INFO
    ON CUSTOMERS_LOCATION_INFO.State = SELLERS_LOCATION_INFO.State
UNION
SELECT 
    COALESCE(CUSTOMERS_LOCATION_INFO.State, SELLERS_LOCATION_INFO.State) AS State,
    IFNULL(CUSTOMERS_LOCATION_INFO.No_Of_Customers,0) AS No_Of_Customers,
    IFNULL(SELLERS_LOCATION_INFO.No_Of_Sellers,0) AS No_Of_Sellers
FROM CUSTOMERS_LOCATION_INFO
RIGHT JOIN SELLERS_LOCATION_INFO
    ON CUSTOMERS_LOCATION_INFO.State = SELLERS_LOCATION_INFO.State
ORDER BY No_Of_Customers DESC;

------------------------------------------------------

-- Q10.How has the number of active sellers changed month by month from 2016 to 2018, 
-- highlighting marketplace growth and peak engagement periods ?
-- Explanation: Counts active sellers per quarter to understand marketplace engagement.

SELECT 
    YEAR(order_purchase_timestamp) AS Active_Year, 
    Monthname (order_purchase_timestamp) AS Month_Name,
    QUARTER(order_purchase_timestamp) AS Active_Quarter,
    COUNT(DISTINCT order_items.seller_id) AS Total_Active_Sellers
FROM orders
JOIN order_items ON order_items.order_id=orders.order_id
WHERE orders.order_status NOT IN ('canceled','unavailable') 
GROUP BY Active_Year,Month_Name, Active_Quarter;

------------------------------------------------------
-- Q11: What percentage of total revenue is contributed by the top 10% of sellers, revealing dependency on key sellers?

-- Explanation: Identifies top sellers and calculates their share of total revenue.

WITH Seller_Revenue AS (
    SELECT
        sellers.seller_id,
        SUM(order_payments.total_payment * seller_items.seller_item_count / total_items.total_items) AS total_revenue
    FROM sellers
    LEFT JOIN (
        SELECT order_id, seller_id, COUNT(*) AS seller_item_count
        FROM order_items
        GROUP BY order_id, seller_id
    ) seller_items ON sellers.seller_id = seller_items.seller_id
    LEFT JOIN (
        SELECT order_id, COUNT(*) AS total_items
        FROM order_items
        GROUP BY order_id
    ) total_items ON seller_items.order_id = total_items.order_id
    LEFT JOIN (
        SELECT order_id, SUM(payment_value) AS total_payment
        FROM order_payments
        GROUP BY order_id
    ) order_payments ON seller_items.order_id = order_payments.order_id
    LEFT JOIN orders ON seller_items.order_id = orders.order_id
        AND orders.order_status = 'delivered'
    GROUP BY sellers.seller_id
),
Seller_Rank AS (
    SELECT
        seller_id,
        total_revenue,
        PERCENT_RANK() OVER (ORDER BY total_revenue DESC) AS revenue_rank
    FROM Seller_Revenue
)
SELECT
    ROUND(
        SUM(CASE WHEN revenue_rank <= 0.1 THEN total_revenue ELSE 0 END)
        * 100.0 / SUM(total_revenue), 2
    ) AS percentage_revenue_from_top_10_percent
FROM Seller_Rank;

--------------------------------------------------------
-- Q12: What percentage of customers are repeat buyers, and what share of revenue do they contribute, showing customer loyalty impact? 

-- Explanation: Shows customer loyalty impact by identifying repeat buyers and their revenue contribution.

WITH Order_Revenue AS (
    SELECT order_id, SUM(payment_value) AS total_payment
    FROM Order_Payments
    GROUP BY order_id
),
Customers_Summary AS (
    SELECT
        customers.customer_unique_id,
        COUNT(DISTINCT orders.order_id) AS number_of_orders,
        SUM(Order_Revenue.total_payment) AS total_revenue
    FROM Customers
    JOIN Orders ON customers.customer_id = orders.customer_id
    JOIN Order_Revenue ON orders.order_id = Order_Revenue.order_id
    WHERE orders.order_status = 'delivered'
    GROUP BY customers.customer_unique_id
)
SELECT
    ROUND(COUNT(CASE WHEN number_of_orders > 1 THEN customer_unique_id END) * 100.0 / COUNT(customer_unique_id), 2) AS percentage_of_repeat_customers,
    ROUND(SUM(CASE WHEN number_of_orders > 1 THEN total_revenue ELSE 0 END) * 100.0 / SUM(total_revenue), 2) AS percentage_of_revenue_from_repeaters
FROM Customers_Summary;

------------------------------------------------------
-- Q13: How do customer reviews and ratings affect sales and revenue performance on Olist ?

-- -- This query shows how many orders and how much revenue each review score generated
-- Only delivered orders are considered to ensure accurate sales performance

SELECT
    order_reviews.review_score,                -- Review rating (1 to 5 stars)
    COUNT(DISTINCT order_reviews.order_id) AS total_orders,  -- Number of orders for that score
    ROUND(SUM(order_payments.payment_value), 2) AS total_revenue -- Total revenue from those orders
FROM order_reviews
JOIN orders
    ON order_reviews.order_id = orders.order_id
JOIN order_payments
    ON order_reviews.order_id = order_payments.order_id
WHERE orders.order_status = 'delivered'  -- Only include successfully delivered orders
GROUP BY order_reviews.review_score
ORDER BY order_reviews.review_score ASC;


------------------------------------------------------
-- Q14: 14.	Who are the top 1% of customers by lifetime spend, 
-- and what percentage of total revenue do they represent, highlighting high-value customers?

-- Explanation: Identifies high-value customers and their share of total revenue.

WITH CustomerLifetimeValue AS (
    SELECT
        Customers.customer_unique_id,
        SUM(Order_Payments.payment_value) AS lifetime_spend
    FROM Customers
    JOIN Orders ON Customers.customer_id = Orders.customer_id
    JOIN Order_Payments ON Orders.order_id = Order_Payments.order_id
    WHERE Orders.order_status = 'delivered'
    GROUP BY Customers.customer_unique_id
),
CustomerPercentiles AS (
    SELECT
        CustomerLifetimeValue.customer_unique_id,
        CustomerLifetimeValue.lifetime_spend,
        NTILE(100) OVER (ORDER BY CustomerLifetimeValue.lifetime_spend DESC) AS percentile_rank
    FROM CustomerLifetimeValue
)
SELECT
    ROUND(SUM(CASE WHEN CustomerPercentiles.percentile_rank = 1 THEN CustomerPercentiles.lifetime_spend ELSE 0 END) * 100.0 / SUM(CustomerPercentiles.lifetime_spend),2) AS percentage_revenue_from_top_1_percent
FROM CustomerPercentiles;

------------------------------------------------------------
-- *********************************************************
